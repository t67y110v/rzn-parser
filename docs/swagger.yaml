basePath: /
definitions:
  requests.CreateUser:
    properties:
      departments:
        $ref: '#/definitions/requests.Department'
      email:
        type: string
      monitoring_responsible:
        type: integer
      monitoring_specialist:
        type: boolean
      name:
        type: string
      password:
        type: string
      seccond_name:
        type: string
      user_role:
        type: string
    type: object
  requests.Department:
    properties:
      client_department:
        type: boolean
      db_department:
        type: boolean
      documentation_department:
        type: boolean
      education_department:
        type: boolean
      international_department:
        type: boolean
      nr_department:
        type: boolean
      periodic_reporting_department:
        type: boolean
      source_tracking_department:
        type: boolean
    type: object
  requests.Email:
    properties:
      email:
        type: string
    type: object
  requests.EmailPassword:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  requests.EmailReq:
    properties:
      body:
        type: string
      recipient_mail:
        type: string
      subject:
        type: string
    type: object
  requests.ParserLogin:
    properties:
      login:
        type: string
      password:
        type: string
      path:
        type: string
    type: object
  requests.UpdateUser:
    properties:
      departments:
        $ref: '#/definitions/requests.Department'
      email:
        type: string
      monitoring_responsible:
        type: integer
      monitoring_specialist:
        type: boolean
      name:
        type: string
      seccond_name:
        type: string
      user_role:
        type: string
    type: object
  responses.CreateUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      seccond_name:
        type: string
    type: object
  responses.Department:
    properties:
      client_department:
        type: boolean
      db_department:
        type: boolean
      documentation_department:
        type: boolean
      education_department:
        type: boolean
      international_department:
        type: boolean
      nr_department:
        type: boolean
      periodic_reporting_department:
        type: boolean
      source_tracking_department:
        type: boolean
    type: object
  responses.DepartmentRes:
    properties:
      departments:
        $ref: '#/definitions/responses.Department'
      monitoring_responsible:
        type: integer
      monitoring_specialist:
        type: boolean
    type: object
  responses.Error:
    properties:
      message:
        type: string
    type: object
  responses.ParserResult:
    properties:
      result:
        type: string
    type: object
  responses.Result:
    properties:
      result:
        type: boolean
    type: object
  responses.UserUpdate:
    properties:
      departments:
        $ref: '#/definitions/responses.Department'
      monitoring_responsible:
        type: integer
      monitoring_specialist:
        type: boolean
      user_role:
        type: string
    type: object
host: localhost:4000
info:
  contact: {}
  description: Swag documentaion for PVSystem24 API
  title: PVSystem24 API
  version: 1.12.0
paths:
  /admin/access:
    post:
      consumes:
      - application/json
      description: checking that user have admin rights
      parameters:
      - description: check adming rights
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.EmailPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: AdminAccess
      tags:
      - Admin
  /department/condition/{email}:
    get:
      consumes:
      - application/json
      description: getting current department condition
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.DepartmentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Department condition
      tags:
      - Department
  /email/send:
    post:
      consumes:
      - application/json
      description: send email
      parameters:
      - description: handler for sending message on email
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.EmailReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Email
      tags:
      - Email
  /parser/parse:
    post:
      consumes:
      - application/json
      description: pars site to get informaion about nr
      parameters:
      - description: create new user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.ParserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.ParserResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Parser
      tags:
      - Parser
  /user/change/password:
    put:
      consumes:
      - application/json
      description: change users passwrod
      parameters:
      - description: change users password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.EmailPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Password Change
      tags:
      - User
  /user/create:
    post:
      consumes:
      - application/json
      description: creation of user
      parameters:
      - description: create new user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: User Create
      tags:
      - User
  /user/delete:
    delete:
      consumes:
      - application/json
      description: delete user from system
      parameters:
      - description: delete user from system
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.Email'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Result'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: User Delete
      tags:
      - User
  /user/session:
    post:
      consumes:
      - application/json
      description: creation new session
      parameters:
      - description: create new session
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.EmailPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CreateUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: Session Create
      tags:
      - User
  /user/update:
    put:
      consumes:
      - application/json
      description: update users info
      parameters:
      - description: update users information
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.Error'
      summary: User Update
      tags:
      - User
swagger: "2.0"
